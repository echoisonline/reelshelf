This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.jsx
src/assets/react.svg
src/components/Card.jsx
src/components/CircularRating.jsx
src/components/Navbar.jsx
src/contexts/FavoriteContext.jsx
src/main.jsx
src/pages/Favorites.jsx
src/pages/Home.jsx
src/pages/Movie.jsx
src/services/api.js
src/styles/App.css
src/styles/Card.css
src/styles/CircularRating.css
src/styles/Favorites.css
src/styles/Home.css
src/styles/index.css
src/styles/Movie.css
src/styles/Navbar.css
vite.config.js

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link
      href="https://api.fontshare.com/v2/css?f[]=space-grotesk@1&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&icon_names=search"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>reelshelf.</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "reelshelf",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host 0.0.0.0",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.1.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.17.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "vite": "^6.0.5"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: src/App.jsx
================
import Home from "./pages/Home";
import Favorites from "./pages/Favorites";
import Card from "./components/Card";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { MovieProvider } from "./contexts/FavoriteContext";
import Navbar from "./components/Navbar";
import "./styles/index.css";
import "./styles/App.css";
import Movie from "./pages/Movie";

function App() {
  return (
    <MovieProvider>
      <Navbar />
      <main className="mainContent">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/favorites" element={<Favorites />} />
          <Route path="/movie/:id" element={<Movie />} />
        </Routes>
      </main>
    </MovieProvider>
  );
}

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/Card.jsx
================
import "../styles/Card.css";
import { useMovieContext } from "../contexts/FavoriteContext";
import { Link } from "react-router-dom";

function Card({ movie }) {
  const { isFavorite, addToFavorites, removeFromFavorites } = useMovieContext();
  const favorite = isFavorite(movie.id);

  function onFavoriteClick(e) {
    e.preventDefault();
    if (favorite) removeFromFavorites(movie.id);
    else addToFavorites(movie);
  }

  return (
    <>
      <Link
        to={`/movie/${movie.id}`}
        style={{ textDecoration: "none", color: "black" }}
      >
        <div className="movie-card">
          <div className="movie-poster">
            <img
              src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}
              alt="{movie.title}"
            />
            <div className="movie-overlay">
              <button
                className={`favorite-btn ${favorite ? "active" : ""}`}
                onClick={onFavoriteClick}
              >
                ❤︎
              </button>
            </div>
            <div className="movie-info">
              <h3 className="title">{movie.title}</h3>
              <h3 className="release-date">
                {movie.release_date?.split("-")[0]}
              </h3>
            </div>
          </div>
        </div>
      </Link>
    </>
  );
}

export default Card;

================
File: src/components/CircularRating.jsx
================
import React from "react";
import "../styles/CircularRating.css";

const CircularRating = ({ rating }) => {
  const percentage = Math.round(rating * 10); // Convert rating (e.g., 7.2) to percentage (72)
  const radius = 25; // Radius of the circle
  const circumference = 2 * Math.PI * radius; // Full circumference of the circle
  const offset = circumference - (percentage / 100) * circumference; // Stroke offset to show progress

  return (
    <svg width="80" height="80" viewBox="0 0 80 80" className="circular-rating">
      {/* Background Circle */}
      <circle cx="40" cy="40" r={radius} className="circle-bg" />

      {/* Progress Circle */}
      <circle
        cx="40"
        cy="40"
        r={radius}
        className="circle-progress"
        style={{ strokeDashoffset: offset, strokeDasharray: circumference }}
      />

      {/* Rating Text in Center */}
      <text
        x="52%"
        y="-48%"
        textAnchor="middle"
        dy=".3em"
        className="rating-text"
        style={{ fontSize: "18px" }}
      >
        {percentage}%
      </text>
    </svg>
  );
};

export default CircularRating;

================
File: src/components/Navbar.jsx
================
import React from "react";
import { Link } from "react-router-dom";
import "../styles/Navbar.css"

function Navbar() {
  return (
    <nav className="navbar">
      <div className="navbar-brand">
        <Link to="/">REELSHELF</Link>
      </div>
      <div className="navbar-links">
        <Link to="/" className="nav-link">
          Home
        </Link>
        <Link to="/favorites" className="nav-link">
          Favorites
        </Link>
      </div>
    </nav>
  );
}

export default Navbar;

================
File: src/contexts/FavoriteContext.jsx
================
import { createContext, useContext, useEffect, useState } from "react";

const MovieContext = createContext();

export const useMovieContext = () => useContext(MovieContext);

export const MovieProvider = ({ children }) => {
  const [favorites, setFavorites] = useState(() => {
    const storedFavs = localStorage.getItem("favorites");
    return storedFavs ? JSON.parse(storedFavs) : [];
  });

  useEffect(() => {
    if (favorites.length > 0) {
      localStorage.setItem("favorites", JSON.stringify(favorites));
    }
  }, [favorites]);

  const addToFavorites = (movie) => {
    setFavorites((prev) => {
      if (!prev.some((fav) => fav.id === movie.id)) {
        return [...prev, movie];
      }
      return prev;
    });
  };

  const removeFromFavorites = (movieId) => {
    setFavorites((prev) => prev.filter((movie) => movie.id !== movieId));
  };

  const isFavorite = (movieId) => {
    return favorites.some((movie) => movie.id === movieId);
  };

  return (
    <MovieContext.Provider
      value={{ favorites, addToFavorites, removeFromFavorites, isFavorite }}
    >
      {children}
    </MovieContext.Provider>
  );
};

================
File: src/main.jsx
================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import "./styles/index.css";
import App from "./App.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>
);

================
File: src/pages/Favorites.jsx
================
import { useMovieContext } from "../contexts/FavoriteContext";
import Card from "../components/Card";
import "../styles/Favorites.css";

function Favorites() {
  const { favorites } = useMovieContext();

  if (favorites != 0) {
    return (
      <div className="favorites">
        <h2 className="favoritesText">Your Favorites</h2>
        <div className="movieGrid">
          {favorites.map((movie) => (
            <Card movie={movie} key={movie.id} />
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="favoritesEmpty">
      <h2>No Favorites Movies Yet</h2>
      <p>Start adding movies to your favorites and they wll appear here.</p>
    </div>
  );
}

export default Favorites;

================
File: src/pages/Home.jsx
================
import Card from "../components/Card";
import { useState, useEffect } from "react";
import { searchMovies, getPopularMovies } from "../services/api";
import { data } from "react-router-dom";
import "../styles/Home.css";
import "../styles/Card.css";

function Home() {
  const [searchQuery, setSearchQuery] = useState("");
  const [movies, setMovies] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadPopularMovies = async () => {
      try {
        const popularMovies = await getPopularMovies();
        setMovies(popularMovies);
      } catch (err) {
        console.log(err);
        setError("Failed to load movies...");
      } finally {
        setLoading(false);
      }
    };

    loadPopularMovies();
  }, []);

  const handleSearch = async (e) => {
    e.preventDefault();
    if (!searchQuery.trim()) return;
    if (loading) return;

    setLoading(true);
    try {
      const searchResults = await searchMovies(searchQuery);
      setMovies(searchResults);
      setError(null);
    } catch (err) {
      console.log(err);
      setError("Failed to find a movie...");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="home">
      <form onSubmit={handleSearch} className="searchForm">
        <input
          type="text"
          placeholder="Search for movies..."
          className="searchInput"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <button type="submit" className="searchButton">
          <span className="material-symbols-outlined">search</span>
        </button>
      </form>

      {error && <div className="error-message">{error}</div>}

      {loading ? (
        <div className="loading">Loading...</div>
      ) : (
        <>
          {/* Показываем "Trending now" и scrollContainer только если нет поиска */}
          {!searchQuery && (
            <>
              <h2 className="trending">Trending now</h2>
              <div className="scrollContainer">
                {movies.map((movie) => (
                  <Card movie={movie} key={movie.id} />
                ))}
              </div>
            </>
          )}

          {searchQuery && (
            <div className="searchResults">
              {movies.length > 0 ? (
                movies.map((movie) => <Card movie={movie} key={movie.id} />)
              ) : (
                <p>No results found.</p>
              )}
            </div>
          )}
        </>
      )}
    </div>
  );
}

export default Home;

================
File: src/pages/Movie.jsx
================
import { useEffect, useState } from "react";
import { data, useParams } from "react-router-dom";
import { API_KEY, BASE_URL } from "../services/api";
import "../styles/Movie.css";
import CircularRating from "../components/CircularRating.jsx";

const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString("en-US", {
    month: "short",
    day: "numeric",
    year: "numeric",
  });
};

function Movie() {
  const { id } = useParams();
  const [movie, setMovie] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchMovie = async () => {
      try {
        setLoading(true);

        const response = await fetch(
          `${BASE_URL}/movie/${id}?api_key=${API_KEY}`
        );

        if (!response.ok)
          throw new Error(`HTTP Error! Status: ${response.status}`);

        const text = await response.text(); // Read response as text first
        if (!text) throw new Error("Empty response from server");

        const data = JSON.parse(text); // Convert to JSON if it's not empty
        setMovie(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchMovie();
  }, [id]);

  if (loading) return <h2>Loading...</h2>;
  if (error) return <h2>Error: {error}</h2>;

  console.log(movie);
  console.log(movie.tagline);

  const formatRuntime = (minutes) => {
    if (minutes < 60) return `${minutes}m`;
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return mins === 0 ? `${hours}h` : `${hours}h ${mins}m`;
  };

  return (
    <div className="movieInfo">
      <div className="mainInfo">
        <div className="header">
          <div className="movieBack">
            <div
              className="backDrop"
              style={{
                backgroundImage: `url(https://image.tmdb.org/t/p/w500${movie.backdrop_path})`,
              }}
            >
              <div className="blurBack">
                <div className="blurLeft"></div>
              </div>
            </div>
          </div>
          <div className="headerWrapper">
            <div className="posterWrapper">
              <img
                className="moviePoster"
                src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}
                alt="{movie.title}"
              />
              <div className="scoreWrapper">
                <p className="movieRating">
                  <CircularRating rating={movie.vote_average} />
                  <span>User Score</span>
                </p>
              </div>
            </div>
            <div className="movieDetailsContainer">
              <h1 className="movieTitle">{movie.title}</h1>
              {movie.tagline && <p className="movieTagline">{movie.tagline}</p>}

              <div className="movieDetailsGrid">
                <div className="detailsColumn">
                  <p className="movieGenres">
                    <strong>Genres</strong> <br />
                    {movie.genres?.map((g) => g.name).join(", ") || "Unknown"}
                  </p>
                  <p className="releaseDate">
                    <strong>{movie.status}</strong> <br />
                    {formatDate(movie.release_date)}, {movie.origin_country}
                  </p>
                  <div className="boxOffice">
                    {movie.budget > 0 && (
                      <p>
                        <strong>Budget</strong> <br />
                        {movie.budget.toLocaleString()}$
                      </p>
                    )}
                    {movie.revenue > 0 && (
                      <p>
                        <strong>Revenue</strong> <br />
                        {movie.revenue.toLocaleString()}$
                      </p>
                    )}
                  </div>
                </div>

                <div className="detailsColumn">
                  <p className="runtime">
                    <strong>Runtime</strong> <br />
                    {formatRuntime(movie.runtime)}
                  </p>
                  <p className="movieCountries">
                    <strong>Production Countries</strong> <br />
                    {movie.production_countries
                      ?.map((g) => g.name)
                      .join(", ") || "Unknown"}
                  </p>
                  <p className="movieProds">
                    <strong>Production Companies</strong> <br />
                    {movie.production_companies
                      ?.map((g) => g.name)
                      .join(", ") || "Unknown"}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className="movieDetailsContainer">
          {/* Left Side: Overview */}
          <div className="movieOverview">
            <p>{movie.overview}</p>
          </div>

          {/* Right Side: Other Details */}
          <div className="movieExtraInfo"></div>
        </div>
      </div>
    </div>
  );
}

export default Movie;

================
File: src/services/api.js
================
export const API_KEY = "d50f66885a91b70e47e8d88a588c83f0";
export const BASE_URL = "https://api.themoviedb.org/3";

export const getPopularMovies = async () => {
  const response = await fetch(`${BASE_URL}/movie/popular?api_key=${API_KEY}`);
  const data = await response.json();
  return data.results;
};

export const searchMovies = async (query) => {
  const response = await fetch(
    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${encodeURIComponent(
      query
    )}`
  );
  const data = await response.json();
  console.log(data);
  return data.results;
};

================
File: src/styles/App.css
================
.mainContent {
  flex: 1;
  /* padding: 1rem; */
  box-sizing: border-box;
  width: 100%;
  display: flex;
  flex-direction: column;
}

================
File: src/styles/Card.css
================
.scrollContainer {
  display: flex;
  gap: 15px;
  margin: 10px;
}

.movie-card {
  position: relative;
  display: flex;
  flex-direction: column;
}

.movie-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0.1),
    rgba(0, 0, 0, 0.8)
  );
  opacity: 0;
  transition: opacity 0.2s;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  padding: 1rem;
  border-radius: 20px;
  height: 400px;
  width: 265px;
}

.movie-card {
  position: relative;
  display: inline-flex;
  justify-content: center;
  flex-direction: column;
  width: 267px;
}

.movie-poster img {
  border-radius: 20px;
  height: 400px;
  width: 265px;
}

.movie-card:hover .movie-overlay {
  opacity: 1;
}

.favorite-btn {
  position: absolute;
  top: 1rem;
  right: 1rem;
  color: white;
  font-size: 1.5rem;
  padding: 0.5rem;
  background-color: rgba(0, 0, 0, 0.5);
  border: 2px solid white;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s;
}

.favorite-btn:hover {
  background-color: rgba(0, 0, 0, 0.8);
}

.favorite-btn.active {
  color: #ff4757;
}

.rating-select {
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  border: none;
  padding: 0.5rem;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 0.5rem;
}

.movie-info {
  padding: 1rem;
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  transition: 0.3s;
}

.movie-card:hover .movie-info h3 {
  color: #2d336b;
  text-shadow: 0px 0px 8px #234ece;
}

.movie-info h3 {
  font-size: 1rem;
  margin: 0;
}

.movie-info p {
  color: #999;
  font-size: 0.9rem;
}

.user-rating {
  color: #ffd700;
  font-size: 0.9rem;
  margin-top: auto;
}

@media (max-width: 768px) {
  .movie-card {
    font-size: 0.9rem;
    width: 187px;
  }

  .movie-info {
    padding: 0.75rem;
  }

  .favorite-btn {
    width: 32px;
    height: 32px;
    font-size: 1.2rem;
  }

  .movie-poster img {
    height: 280px;
    width: 185px;
  }

  .movie-overlay {
    height: 280px;
    width: 185px;
  }

  .movie-info h3 {
    font-size: 15px;
  }
}

================
File: src/styles/CircularRating.css
================
.circular-rating {
  transform: rotate(-90deg); /* Rotates progress bar to start from top */
}

.circle-bg {
  fill: none;
  stroke: #ddd;
  stroke-width: 8;
}

.circle-progress {
  fill: none;
  stroke: #4caf50; /* Green progress color */
  stroke-width: 8;
  stroke-linecap: round;
  transition: stroke-dashoffset 0.5s ease-in-out;
}

.rating-text {
  position: relative;
  font-size: 18px;
  font-weight: bold;
  fill: #dddddd;
  transform: rotate(90deg); /* Rotate text back */
}

================
File: src/styles/Favorites.css
================
.favoritesEmpty {
  position: relative;
  text-align: center;
  top: 40vh;
}

.favorites {
  display: flex;
  flex-direction: column;
  justify-content: space;
}

.movieGrid {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
  margin-left: 25px;
}

.favoritesText {
  margin: 10px auto;
  max-width: fit-content;
  margin-left: auto;
  margin-right: auto;
}

.favoritesEmpty h2 {
  font-size: 30px;
}

.favoritesEmpty p {
  font-size: 22px;
  font-weight: 600;
}

================
File: src/styles/Home.css
================
.home {
  display: flex;
  padding: 2rem 0;
  width: 100%;
  box-sizing: border-box;
  flex-direction: column;
}

.searchForm {
  display: flex;
  gap: 1rem;
  position: relative;
  margin: 0 auto;
  margin-bottom: 15px;
  align-items: center;
  left: 14px;
}

.searchInput {
  padding: 7px;
  padding-left: 10px;
  font-size: 1.2rem;
  background-color: unset;
  border: 2px solid rgb(120, 134, 199);
  border-radius: 99px;
  transition: 0.2s ease-in;
  box-shadow: rgba(0, 0, 0, 0.1) 0px 5px 15px;
}

.searchInput:hover {
  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
}

.searchInput:focus {
  outline: none;
  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
}

.searchButton {
  border: none;
  background-color: unset;
  position: relative;
  right: 50px;
  color: rgb(39, 41, 72);
  cursor: pointer;
}

.trending {
  margin: 0 auto;
  margin-bottom: 15px;
}

.scrollContainer {
  display: flex;
  flex-wrap: nowrap; /* Запрещает перенос элементов */
  overflow-x: auto; /* Добавляет горизонтальный скролл */
  gap: 10px; /* Отступы между карточками */
  padding: 10px 0;
  max-width: 100%; /* Ограничиваем ширину */
  white-space: nowrap; /* Предотвращает перенос текста */
}

.searchResults {
  display: flex;
  flex-wrap: wrap; /* Позволяет карточкам переноситься */
  gap: 15px;
  justify-content: center; /* Центрируем карточки */
  margin-top: 20px;
}

================
File: src/styles/index.css
================
*{
    margin: 0;
    padding: 0;
    font-family: 'Space Grotesk', sans-serif;
    text-decoration: none;
    box-sizing: border-box;
    
}

body{
    background-color: #FFF2F2;
    margin: 0;
    width: 100%;
    position: relative;
    min-height: 100vh;
}

================
File: src/styles/Movie.css
================
.posterWrapper {
  padding: 15px;
  display: flex;
}

* {
  text-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
}

.mainInfo {
  display: flex;
  /* gap: 10px; */
  width: 100%;
  box-sizing: border-box;
  flex-direction: column;
}
.movieDetailsContainer {
  padding: 10px;
  margin: 10px;
}

.movieDetailsGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  align-items: start;
  gap: 50px;
  margin: 10px 0px;
}

.detailsColumn {
  display: flex;
  flex-direction: column; /* Stretch details as much as possible */
  height: 100%; /* Take full height */
}

.rightSide {
  display: flex;
  overflow-wrap: anywhere;
  flex-direction: column;
}
.moviePoster {
  height: 400px;
  border-radius: 20px;
  margin-left: 80px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2); /* Soft shadow */
}

.scoreWrapper {
  position: absolute;
  margin-left: 80px;
  display: flex;
  width: 267px;
  height: 480px;
  background-color: #7886c7;
  z-index: -1;
  border-radius: 20px;
  align-items: end;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2); /* Soft shadow */
}

.header {
  display: flex;
  width: 100%;
  min-height: 510px;
  position: relative;
  height: auto;
  overflow: hidden;
  flex-direction: column;
}

.movieInfo {
  display: flex;
  flex-wrap: wrap;
}

.movieBack {
  display: flex;
  background-color: rgb(66, 58, 105, 30%);
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: -2;
  box-sizing: border-box;
}

.backDrop {
  background-position: left calc((50vw - 300px) - 200px) top;
  background-size: cover;
  background-repeat: no-repeat;
  background-position-y: center;
  width: 100%;
  position: relative;
  padding: -5px;
  transform: scale(1.04);
  filter: blur(3px);
  z-index: -1;
  box-sizing: border-box;
}

.blurBack {
  background: rgba(73.5, 73.5, 136.5, 0.2);
  height: 100%;
}

.blurLeft {
  background: linear-gradient(
    90deg,
    rgba(73.5, 73.5, 136.5, 1) 50%,
    rgba(0, 0, 0, 0) 100%
  );
  z-index: 1;
  height: 100%;
}

.movieTitle {
  font-size: 52px;
  font-weight: 700;
  word-spacing: -5px;
  line-height: 45px;
  margin-bottom: 15px;
  /* text-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2); */
}

.releaseDate {
  font-size: 18px;
  position: relative;
}

.movieCountry {
  position: relative;
  align-self: center;
  top: 6px;
  font-size: 24px;
}

.movieTagline {
  /* font-size: 1.2rem; */
  font-style: italic;
  color: #888;
  margin-bottom: 20px;
  /* font-weight: 600; */
  font-size: 24px;
}

.infoWrapper {
  padding: 15px;
}

.movieCountry img {
  position: relative;
}

.headerWrapper {
  display: flex;
  flex-direction: row;
  color: white;
  gap: 40px;
}

.movieGenres {
  font-size: 20px;
  margin-bottom: 5px;
}

.movieRating {
  display: flex;
  flex-direction: row;
  top: 10px;
  font-size: 38px;
  font-weight: 700;
}

.movieRating span {
  letter-spacing: -2px;
  position: relative;
  align-self: center;
}

.movieGenres,
.releaseDate,
.boxOffice,
.movieProds,
.movieCountries,
.runtime {
  font-size: 20px;
  margin-bottom: 5px;
}

.boxOffice {
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 5px;
}

strong {
  font-size: 24px;
  font-weight: 600;
}

.movieOverview {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  padding: 20px;
  background: rgb(45, 51, 107);
  font-size: 18px;
  line-height: 1.6;
  color: #fff;
  justify-self: flex-start;
  text-align: justify;
}

@media (max-width: 768px) {
  .movieBack {
    display: hidden;
    display: flex;
    background-color: rgb(66, 58, 105, 30%);
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: -2;
    box-sizing: border-box;
  }

  .movieOverview {
    font-size: 16px;
    padding: 15px;
  }

  .backDrop {
    display: hidden;
    background-position: calc((((100vw / 2.222222) - 20px) / 1.5) / 2) 0;
    background-size: cover;
    background-repeat: no-repeat;
    background-position-y: center;
    width: 100%;
    position: relative;
    transform: scale(1.04);
    filter: blur(1px);
    z-index: -1;
    box-sizing: border-box;
  }

  .blurBack {
    display: hidden;
    background: rgba(73.5, 73.5, 136.5, 0.2);
    height: 100%;
  }

  .blurLeft {
    background: linear-gradient(
      90deg,
      rgba(73.5, 73.5, 136.5, 1) 30%,
      rgba(0, 0, 0, 0) 100%
    );
    z-index: 1;
    height: 100%;
  }

  .posterWrapper {
    padding: 0px;
  }

  .headerWrapper {
    padding: 10px;
  }

  .rightSide {
    background-color: rgb(46, 52, 108, 0.3);
    border-radius: 20px;
    height: 196px;
    border: 2px solid rgb(46, 52, 108, 0.4);
    z-index: -1;
    margin: 20px 0px 0px 20px;
  }

  .moviePoster {
    height: 200px;
    border-radius: 20px;
    margin: 20px 0px 0px 20px;
  }

  .mainInfo {
    /* padding: 20px; */
  }

  .movieTitle {
    font-size: 32px;
    flex-wrap: wrap;
  }

  .releaseDate,
  .movieTagline {
    font-weight: 600;
    align-self: normal;
    margin-bottom: 4px;
  }
}

================
File: src/styles/Navbar.css
================
.navbar {
  background-color: #2d336b;
  display: flex;
  justify-content: space-between;
  position: relative;
  padding: 0.75rem 2.5rem;
  text-shadow: 2px 8px 6px rgba(0, 0, 0, 0.2),
    0px -5px 35px rgba(255, 255, 255, 0.3);
  height: 70px;
  align-items: center;
}

.navbar-links {
  display: flex;
  gap: 2rem;
  font-size: 24px;
}

.navbar-brand a {
  color: white;
  font-size: 24px;
}

.nav-link {
  color: white;
  transition: 0.2s;
}

.nav-link:hover {
  color: red;
}

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})



================================================================
End of Codebase
================================================================
